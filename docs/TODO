Journal Paper TODO:

Deadline: 1/10/07
1. Run SOS on this
	- Timer peripheral
	- UART: Loading program from serial port
		- Write a serial port loader
2. Instantiate and run on the FPGA
---------------------------------------
Deadline: 1/31/07
3. Evaluation/Experience:
	- Run SOS
	i. Describe how SOS uses these protection features
	ii. Look for some embedded system beachmarks and use them
	iii. Evaluation of overheads using software based protection, uMPU protection and no protection
		- FFTs and other similar programs
	iv. Modifications of programing practices to be followed for using uMPU
Read the paper ASAP
4. Related work
	- Compare more closely with Xtensa work

New things to do:
1. Automate the setting of the domain bounds for each domain loaded into the system.
2. Figure out how to deal with compiler generated routines such as multiplication and division
3. Ensure that the priority of the umpu_irq is high as we think it is
	- This can be accessed by writing a test program using the 'when' thing in HW similar to the way priority is maintained in interrupts

Work Done:
1. MMC is not actually using the stack bound to check the stores to the stack
	- Now the safe_stack sends stack_bound to MMC and it checks the writes on stack
2. Presently we are in middle of using the mmc_enable bit in the status reg and in_trusted_domain
   to enable memory protection. I believe that only mmc.vhd is using the mmc_enable signal
   and other modules are not. We need to get rid of the mmc_enable bit or use it in all the modules
3. Within trusted domain, use regular stack for normal call and return instrs
4. Check for stack overflow
5. Implementing the domain bounds in program memory
	- Implement using a buffer in RAM
	- Add two bound registers for the bounds of the current domain
6. Simplistic exception routine
	- Raise an interrupt on panic
7. Fix rcall and icall similar to the regular call
8. Optimizations:
	- Barrel shifters
	- The ram_bus arbiter does not need to latch and put the data on the bus
	- Latch the program_counter on the first clock cycle of cross domain call

Things partially done:
1. Instantiated a very simple program and ran it on the FPGA.
