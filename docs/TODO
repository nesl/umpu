Journal Paper TODO:

Deadline: 12/31/06
1. Within trusted domain, use regular stack for normal call and return instrs
2. Implementing the domain bounds in program memory
	- Implement using a buffer in RAM
	- Add two bound registers for the bounds of the current domain
3. Fix rcall and icall similar to the regular call
4. Check for stack overflow
5. Simplistic exception routine
	- Raise an interrupt on panic
6. Optimizations:
	- Barrel shifters
	- The ram_bus arbiter does not need to latch and put the data on the bus
	- Latch the program_counter on the first clock cycle of cross domain call

Other fixs to be made:
1. Presently we are in middle of using the mmc_enable bit in the status reg and in_trusted_domain
   to enable memory protection. I believe that only mmc.vhd is using the mmc_enable signal
   and other modules are not. We need to get rid of the mmc_enable bit or use it in all the modules

----------------------------------------
Deadline: 1/10/07
7. Run SOS on this
	- Timer peripheral
	- UART: Loading program from serial port
		- Write a serial port loader
8. Instantiate and run on the FPGA
---------------------------------------
Deadline: 1/31/07
9. Evaluation/Experience:
	- Run SOS
	i. Describe how SOS uses these protection features
	ii. Look for some embedded system beachmarks and use them
	iii. Evaluation of overheads using software based protection, uMPU protection and no protection
		- FFTs and other similar programs
	iv. Modifications of programing practices to be followed for using uMPU
Read the paper ASAP
10. Related work
	- Compare more closely with Xtensa work

Work Done:
1. MMC is not actually using the stack bound to check the stores to the stack
	- Now the safe_stack sends stack_bound to MMC and it checks the writes on stack
